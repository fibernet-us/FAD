/*
 * Copyright Wen Bian. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 * 
 * - Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer listed in this license in the
 *   documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the copyright holders nor the names of its contributors may
 *   be used to endorse or promote products derived from this software without specific
 *   prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.fiberdiffraction.jad;

enum Xtype {
	XTYPE_D, XTYPE_r, XTYPE_T
}

public class CoreData {

	private double[] bgX, bgY; // background data obtained from deconvolution
	private double[] bgYfit; // background data obtained from fitting
	private double[][] outX, outY; // output - raw data from deconvolution
	private double[][] outXitp, outYitp; // output - interpolated, with X evenly
											// spaced on grid points
	private int nll; // number of layerlines (first dimension of arrays outX,
						// etc)

	/*
	 * Background data methods
	 */
	public double[] getBgX() {
		return bgX;
	}

	public double[] getBgY() {
		return bgY;
	}

	// return bgX in XTYPE_r
	public double[] getBgr() {
		double[] r = new double[bgX.length];
		for (int i = 0; i < bgX.length; i++)
			r[i] = D2r(bgX[i]);
		return r;
	}

	// return bgX in XTYPE_T
	public double[] getBgT() {
		double[] T = new double[bgX.length];
		for (int i = 0; i < bgX.length; i++)
			T[i] = D2T(bgX[i]);
		return T;
	}

	public void setBgYfit(double[] Yfit) {
		bgYfit = new double[Yfit.length];
		for (int i = 0; i < bgYfit.length; i++)
			bgYfit[i] = Yfit[i];
	}

	/*
	 * Output data methods
	 */
	public double[][] getOutX() {
		return outX;
	}

	public double[][] getOutY() {
		return outY;
	}

	public double[][] getOutXitp() {
		return outXitp;
	}

	public double[][] getOutYitp() {
		return outYitp;
	}

	public void SetOutXitp(double[][] X) {
		outXitp = new double[nll][];
		for (int i = 0; i < nll; i++) {
			outXitp[i] = new double[X[i].length];
			for (int j = 0; j < X[i].length; j++)
				outXitp[i][j] = X[i][j];
		}
	}

	public void SetOutYitp(double[][] Y) {
		outYitp = new double[nll][];
		for (int i = 0; i < nll; i++) {
			outYitp[i] = new double[Y[i].length];
			for (int j = 0; j < Y[i].length; j++)
				outYitp[i][j] = Y[i][j];
		}
	}

	// TODO: convert D to r
	private double D2r(double d) {
		return d;
	}

	// TODO: convert D to T
	private double D2T(double d) {
		return d;
	}

	/*
	 * Data Example
	 */
	public void setDataExample() {

		bgX = new double[] { 0.0522, 0.0525, 0.0529, 0.0532, 0.0536, 0.0539,
				0.0542, 0.0546, 0.0549, 0.0553, 0.0556, 0.0560, 0.0563, 0.0567,
				0.0570, 0.0573, 0.0577, 0.0580, 0.0584, 0.0587, 0.0591, 0.0594,
				0.0598, 0.0601, 0.0605, 0.0608, 0.0612, 0.0615, 0.0618, 0.0622,
				0.0625, 0.0629, 0.0632, 0.0636, 0.0639, 0.0643, 0.0646, 0.0649,
				0.0653, 0.0656, 0.0660, 0.0663, 0.0667, 0.0670, 0.0674, 0.0677,
				0.0680, 0.0684, 0.0687, 0.0691, 0.0694, 0.0698, 0.0701, 0.0705,
				0.0708, 0.0712, 0.0715, 0.0718, 0.0722, 0.0725, 0.0729, 0.0732,
				0.0736, 0.0739, 0.0742, 0.0746, 0.0749, 0.0753, 0.0756, 0.0760,
				0.0763, 0.0766, 0.0770, 0.0773, 0.0777, 0.0780, 0.0784, 0.0787,
				0.0790, 0.0794, 0.0797, 0.0801, 0.0804, 0.0808, 0.0811, 0.0814,
				0.0818, 0.0821, 0.0825, 0.0828, 0.0832, 0.0835, 0.0838, 0.0842,
				0.0845, 0.0849, 0.0852, 0.0856, 0.0859, 0.0862, 0.0866, 0.0869,
				0.0873, 0.0876, 0.0879, 0.0883, 0.0886, 0.0890, 0.0893, 0.0896,
				0.0900, 0.0903, 0.0907, 0.0910, 0.0914, 0.0917, 0.0920, 0.0924,
				0.0927, 0.0931, 0.0934, 0.0937, 0.0941, 0.0944, 0.0948, 0.0951,
				0.0954, 0.0958, 0.0961, 0.0965, 0.0968, 0.0971, 0.0975, 0.0978,
				0.0982, 0.0985, 0.0988, 0.0992, 0.0995, 0.0999, 0.1002, 0.1005,
				0.1009, 0.1012, 0.1016, 0.1019, 0.1022, 0.1026, 0.1029, 0.1032,
				0.1036, 0.1039, 0.1043, 0.1046, 0.1049, 0.1053, 0.1056, 0.1060,
				0.1063, 0.1066, 0.1070, 0.1073, 0.1076, 0.1080, 0.1083, 0.1087,
				0.1090, 0.1093, 0.1097, 0.1100, 0.1104, 0.1107, 0.1110, 0.1114,
				0.1117, 0.1120, 0.1124, 0.1127, 0.1130, 0.1134, 0.1137, 0.1140,
				0.1144, 0.1147, 0.1151, 0.1154, 0.1157, 0.1161, 0.1164, 0.1168,
				0.1171, 0.1174, 0.1177, 0.1181, 0.1184, 0.1188, 0.1191, 0.1194,
				0.1198, 0.1201 };

		bgY = new double[] { 23.42, 23.35, 23.30, 23.05, 23.06, 22.89, 23.00,
				22.83, 22.69, 22.40, 22.38, 22.23, 22.26, 22.17, 22.13, 22.03,
				21.96, 21.88, 21.79, 21.92, 22.33, 21.96, 21.91, 22.19, 22.15,
				22.17, 22.17, 22.03, 22.08, 21.96, 21.88, 21.88, 21.87, 21.84,
				22.01, 21.96, 22.13, 22.21, 22.12, 22.38, 22.37, 22.47, 22.41,
				22.35, 22.39, 22.46, 22.37, 22.36, 22.31, 22.36, 22.32, 22.24,
				22.34, 22.56, 22.56, 22.47, 22.61, 22.40, 22.08, 22.21, 22.24,
				22.29, 22.32, 22.73, 22.37, 22.35, 22.43, 22.46, 22.46, 22.46,
				22.50, 22.44, 22.52, 22.45, 22.58, 22.55, 22.47, 22.62, 22.54,
				22.76, 22.88, 23.15, 23.65, 24.42, 25.02, 24.69, 25.05, 25.11,
				25.07, 25.16, 25.19, 25.29, 25.45, 25.16, 24.80, 24.73, 24.60,
				24.38, 24.32, 24.33, 24.29, 24.32, 24.33, 24.26, 24.28, 24.21,
				42.92, 47.07, 33.25, 33.93, 33.59, 32.99, 33.07, 32.41, 31.74,
				30.76, 29.32, 28.69, 27.81, 26.95, 26.15, 26.62, 25.93, 25.87,
				25.32, 25.77, 25.70, 25.61, 25.46, 25.66, 25.73, 25.99, 26.35,
				26.25, 26.48, 26.59, 26.70, 26.33, 26.24, 26.23, 26.13, 25.91,
				25.83, 25.82, 25.76, 25.88, 25.91, 25.72, 25.79, 25.71, 25.92,
				25.75, 25.56, 25.88, 25.74, 25.68, 25.76, 25.62, 25.91, 25.92,
				26.08, 25.95, 25.90, 25.96, 26.14, 26.31, 26.32, 26.54, 26.52,
				26.52, 26.46, 26.34, 26.29, 26.43, 26.29, 26.45, 26.27, 26.23,
				26.22, 26.44, 26.32, 26.37, 26.30, 26.21, 26.32, 26.51, 26.67,
				26.43, 26.41, 26.38, 26.35, 26.44, 26.03, 26.16, 26.32, 26.09,
				25.98, 26.02, 26.13, 26.02 };

		nll = 3;
		outX = new double[][] { // [3][100]
				{ 0.0522, 0.0525, 0.0529, 0.0532, 0.0536, 0.0539, 0.0542,
						0.0546, 0.0549, 0.0553, 0.0556, 0.0560, 0.0563, 0.0567,
						0.0570, 0.0573, 0.0577, 0.0580, 0.0584, 0.0587, 0.0591,
						0.0594, 0.0598, 0.0601, 0.0605, 0.0608, 0.0612, 0.0615,
						0.0618, 0.0622, 0.0625, 0.0629, 0.0632, 0.0636, 0.0639,
						0.0643, 0.0646, 0.0649, 0.0653, 0.0656, 0.0660, 0.0663,
						0.0667, 0.0670, 0.0674, 0.0677, 0.0680, 0.0684, 0.0687,
						0.0691, 0.0694, 0.0698, 0.0701, 0.0705, 0.0708, 0.0712,
						0.0715, 0.0718, 0.0722, 0.0725, 0.0729, 0.0732, 0.0736,
						0.0739, 0.0742, 0.0746, 0.0749, 0.0753, 0.0756, 0.0760,
						0.0763, 0.0766, 0.0770, 0.0773, 0.0777, 0.0780, 0.0784,
						0.0787, 0.0790, 0.0794, 0.0797, 0.0801, 0.0804, 0.0808,
						0.0811, 0.0814, 0.0818, 0.0821, 0.0825, 0.0828, 0.0832,
						0.0835, 0.0838, 0.0842, 0.0845, 0.0849, 0.0852, 0.0856,
						0.0859, 0.1201 },
				{ 0.0501, 0.0505, 0.0508, 0.0512, 0.0515, 0.0519, 0.0523,
						0.0526, 0.0530, 0.0534, 0.0537, 0.0541, 0.0544, 0.0548,
						0.0551, 0.0555, 0.0558, 0.0562, 0.0566, 0.0569, 0.0573,
						0.0576, 0.0580, 0.0583, 0.0587, 0.0591, 0.0594, 0.0598,
						0.0601, 0.0605, 0.0608, 0.0612, 0.0615, 0.0619, 0.0622,
						0.0626, 0.0630, 0.0633, 0.0637, 0.0640, 0.0644, 0.0647,
						0.0651, 0.0654, 0.0658, 0.0661, 0.0665, 0.0668, 0.0672,
						0.0675, 0.0679, 0.0683, 0.0686, 0.0689, 0.0693, 0.0697,
						0.0700, 0.0704, 0.0707, 0.0711, 0.0714, 0.0718, 0.0721,
						0.0725, 0.0728, 0.0732, 0.0735, 0.0739, 0.0742, 0.0746,
						0.0749, 0.0753, 0.0756, 0.0760, 0.0763, 0.0767, 0.0770,
						0.0774, 0.0777, 0.0780, 0.0784, 0.0788, 0.0791, 0.0795,
						0.0798, 0.0801, 0.0805, 0.0808, 0.0812, 0.0815, 0.0819,
						0.0822, 0.0826, 0.0829, 0.0833, 0.0836, 0.0840, 0.0843,
						0.0847, 0.0850 },
				{ 0.0434, 0.0438, 0.0442, 0.0446, 0.0450, 0.0454, 0.0459,
						0.0463, 0.0467, 0.0471, 0.0475, 0.0479, 0.0483, 0.0487,
						0.0491, 0.0495, 0.0499, 0.0503, 0.0507, 0.0511, 0.0515,
						0.0519, 0.0523, 0.0527, 0.0531, 0.0535, 0.0539, 0.0542,
						0.0546, 0.0550, 0.0554, 0.0558, 0.0562, 0.0566, 0.0570,
						0.0573, 0.0577, 0.0581, 0.0585, 0.0589, 0.0593, 0.0597,
						0.0600, 0.0604, 0.0608, 0.0612, 0.0616, 0.0619, 0.0623,
						0.0627, 0.0631, 0.0635, 0.0638, 0.0642, 0.0646, 0.0650,
						0.0654, 0.0657, 0.0661, 0.0665, 0.0669, 0.0672, 0.0676,
						0.0680, 0.0683, 0.0687, 0.0691, 0.0695, 0.0698, 0.0702,
						0.0706, 0.0709, 0.0713, 0.0717, 0.0721, 0.0724, 0.0728,
						0.0732, 0.0735, 0.0739, 0.0743, 0.0746, 0.0750, 0.0754,
						0.0757, 0.0761, 0.0765, 0.0768, 0.0772, 0.0776, 0.0779,
						0.0783, 0.0787, 0.0790, 0.0794, 0.0798, 0.0801, 0.0805,
						0.0809, 0.0812 } };

		outY = new double[][] { // [3][100]
				{ 94.70, 91.10, 96.60, 58.10, 47.40, 38.70, 30.60, 22.90,
						16.40, 11.10, 8.00, 5.80, 4.40, 4.00, 3.70, 3.40, 4.20,
						5.40, 5.60, 5.30, 3.60, 3.60, 4.20, 2.10, 1.80, 0.20,
						0.70, 1.80, 2.60, 2.40, 4.00, 4.60, 3.60, 3.70, 2.80,
						1.50, 3.10, 1.20, 1.10, 0.10, 2.10, 3.00, 6.30, 9.50,
						13.10, 17.30, 20.70, 26.80, 29.50, 33.10, 34.50, 36.10,
						36.00, 34.00, 32.50, 27.70, 22.60, 18.30, 14.50, 10.40,
						6.80, 5.40, 2.50, 3.20, 4.70, 8.00, 11.20, 13.30,
						15.00, 17.80, 19.90, 19.60, 20.20, 18.90, 15.60, 13.40,
						11.70, 7.40, 5.90, 3.30, 3.20, 2.40, 0.70, 0.90, 2.60,
						5.60, 9.10, 9.90, 11.90, 13.50, 13.80, 12.80, 10.90,
						10.20, 8.80, 7.40, 5.10, 2.60, 1.90, 4.60 },
				{ 34.60, 34.40, 31.50, 30.90, 29.10, 26.20, 22.90, 20.40,
						18.40, 17.40, 15.90, 15.60, 15.50, 15.30, 16.40, 17.50,
						19.60, 21.10, 23.80, 25.10, 26.20, 28.30, 28.80, 30.00,
						30.30, 30.50, 31.10, 32.00, 31.20, 31.40, 32.10, 32.00,
						31.30, 32.20, 33.20, 33.20, 32.80, 33.10, 33.40, 33.60,
						34.10, 33.50, 32.60, 32.10, 31.60, 30.10, 28.70, 28.40,
						26.80, 25.00, 24.30, 21.80, 20.70, 19.00, 18.30, 17.20,
						16.00, 15.50, 14.00, 14.50, 14.50, 13.70, 13.60, 13.00,
						13.80, 13.50, 13.90, 14.80, 15.20, 15.80, 17.30, 17.60,
						19.20, 20.30, 21.20, 20.80, 22.00, 22.60, 22.70, 23.20,
						23.40, 22.20, 22.10, 21.20, 20.30, 20.70, 20.20, 20.10,
						21.00, 21.80, 22.70, 23.80, 24.90, 26.70, 27.30, 29.10,
						30.10, 31.80, 31.80, 31.40 },
				{ 34.80, 33.60, 31.10, 29.40, 26.10, 24.60, 19.50, 16.00,
						10.80, 7.70, 4.90, 3.30, 2.10, 1.80, 2.90, 5.30, 8.60,
						11.90, 16.10, 20.10, 22.00, 25.80, 28.10, 29.80, 29.10,
						28.70, 27.20, 23.70, 20.60, 18.30, 14.20, 10.90, 8.40,
						6.10, 6.60, 6.60, 8.30, 10.90, 15.10, 19.20, 25.50,
						29.80, 35.50, 40.80, 45.10, 50.40, 53.50, 55.60, 56.40,
						57.00, 56.20, 55.10, 52.30, 47.70, 45.50, 43.70, 38.30,
						35.30, 31.20, 28.90, 26.60, 23.20, 22.60, 20.10, 18.90,
						18.20, 17.60, 17.10, 16.80, 16.80, 16.20, 15.50, 16.00,
						16.00, 15.00, 14.90, 14.30, 12.90, 13.50, 13.10, 12.40,
						12.50, 12.60, 13.10, 13.50, 15.40, 17.50, 19.60, 22.00,
						24.50, 27.00, 29.20, 31.20, 33.00, 34.70, 35.10, 34.40,
						35.10, 35.20, 34.50 } };
	}
}
